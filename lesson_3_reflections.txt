When would you want to use a remote repository rather than keeping all your work local?

Remote repositories allow you to easily share your work and collaborate with others. Much
like other cloud storage, remote repositories also protect you from local computer failure.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

To phrase this slightly differently: why wouldn't you want Git to automatically pull
all changes from your remote repository? One reason I can think of is that, if you
use your remote repository as the 'public-ready version' of your project, you might
be working on conflicting features in your local repository. This is fine, until Git
tries to pull a bugfix you made to your public repository that conflicts with your
new feature.

Another good reason that came up in the lesson was that conflicts may arise when you 
are collaborating and someone else has made changes to your remote repository.

Describe the differences between forks, clones, and branches. 
When would you use one instead of another?

1. Branches are separate lines of commits stemming from a single shared origin point.
They exist in a single repository.

2. Clones are complete copies of a repository.

3. Forks are clones of a repository that are stored on GitHub with some nice additional
features like attribution and contributor permissions.

You would use branches to differentiate features or paths within a single project. You
would use a fork to publicly start your own variation on someone else's project. Clones
are used to make a local copy of a project for your own personal use, but are not the
standard way to collaborate with GitHub.

What is the benefit of having a copy of the last known state of the remote stored locally?

There are two big benefits to having the last known state of a remote saved locally.

1. You can review changes to your remote before propogating them to your working branch.

2. You can now use both your working repository and a copy of your remote offline, say
   when you're travelling.
   
How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?

Without Git or GitHub, I would probably try to collaborate the way I do with other
projects - passing around documents with 'track changes' enabled. This accomplishes
some of the same collaboration and note-sharing features of GitHub, but does so
without robust version control. This means that we can march ever forward in the
quest to the final document, but can't easily see where we came from or resolve 
differing views on how the document should turn out.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?

Similarly to the answer earlier, I would want to make changes in a branch to keep
different paths of development separate until they are integrated into a final version.
Additionally, in the context of GitHub, branches are important because they give
others a chance to review changes before they are pushed to master.